<Empty> ->
<Opt Function Definitions> -> <Empty>
Token: separator	Lexer:$$
Token: keyword		Lexer:int
<Qualifier> -> int
Token: identifier	Lexer:i
Token: separator	Lexer:,
Token: identifier	Lexer:max
Token: separator	Lexer:,
Token: identifier	Lexer:sum
<IDs> -> <Identifier>
<IDs> -> <Identifier>, <IDs>
<IDs> -> <Identifier>, <IDs>
<Declaration> -> <Qualifier > <IDs>
Token: separator	Lexer:;
<Declaration List>  -> <Declaration> ;
<Opt Declaration List> -> <Declaration List>
Token: identifier	Lexer:sum
Token: operator	Lexer:=
Token: integer		Lexer:0
<Primary> -> <Integer>
<Factor> -> <Primary>
<Empty> ->
<Term2> -> <Empty>
<Term2> -> <Factor> <Term2>
<Empty> ->
<Expression2> -> <Empty>
<Expression1>  -> <Term2> <Expression2>
Token: separator	Lexer:;
<Assign> -> <Identifier> = <Expression1>;
<Statement> -> <Assign>
Token: identifier	Lexer:i
Token: operator	Lexer:=
Token: integer		Lexer:1
<Primary> -> <Integer>
<Factor> -> <Primary>
<Empty> ->
<Term2> -> <Empty>
<Term2> -> <Factor> <Term2>
<Empty> ->
<Expression2> -> <Empty>
<Expression1>  -> <Term2> <Expression2>
Token: separator	Lexer:;
<Assign> -> <Identifier> = <Expression1>;
<Statement> -> <Assign>
Token: keyword		Lexer:get
Token: separator	Lexer:(
Token: identifier	Lexer:max
<IDs> -> <Identifier>
Token: separator	Lexer:)
Token: separator	Lexer:;
<Scan> -> get ( <IDs> );
<Statement> -> <Scan>
Token: keyword		Lexer:while
Token: separator	Lexer:(
Token: identifier	Lexer:i
<Primary> -> <Identifier>
<Factor> -> <Primary>
<Empty> ->
<Term2> -> <Empty>
<Term2> -> <Factor> <Term2>
<Empty> ->
<Expression2> -> <Empty>
<Expression1>  -> <Term2> <Expression2>
Token: operator	Lexer:<
<Relop> -> <
Token: identifier	Lexer:max
<Primary> -> <Identifier>
<Factor> -> <Primary>
<Empty> ->
<Term2> -> <Empty>
<Term2> -> <Factor> <Term2>
<Empty> ->
<Expression2> -> <Empty>
<Expression1>  -> <Term2> <Expression2>
<Condition> -> <Expression1>  <Relop>   <Expression1>
Token: separator	Lexer:)
Token: separator	Lexer:{
Token: identifier	Lexer:sum
Token: operator	Lexer:=
Token: identifier	Lexer:sum
<Primary> -> <Identifier>
<Factor> -> <Primary>
<Empty> ->
<Term2> -> <Empty>
<Term2> -> <Factor> <Term2>
Token: operator	Lexer:+
Token: identifier	Lexer:i
<Primary> -> <Identifier>
<Factor> -> <Primary>
<Empty> ->
<Term2> -> <Empty>
<Term2> -> <Factor> <Term2>
<Empty> ->
<Expression2> -> <Empty>
<Expression2>  ->   + <Term2> <Expression2>
<Expression1>  -> <Term2> <Expression2>
Token: separator	Lexer:;
<Assign> -> <Identifier> = <Expression1>;
<Statement> -> <Assign>
Token: identifier	Lexer:i
Token: operator	Lexer:=
Token: identifier	Lexer:i
<Primary> -> <Identifier>
<Factor> -> <Primary>
<Empty> ->
<Term2> -> <Empty>
<Term2> -> <Factor> <Term2>
Token: operator	Lexer:+
Token: integer		Lexer:1
<Primary> -> <Integer>
<Factor> -> <Primary>
<Empty> ->
<Term2> -> <Empty>
<Term2> -> <Factor> <Term2>
<Empty> ->
<Expression2> -> <Empty>
<Expression2>  ->   + <Term2> <Expression2>
<Expression1>  -> <Term2> <Expression2>
Token: separator	Lexer:;
<Assign> -> <Identifier> = <Expression1>;
<Statement> -> <Assign>
<Statement List> -> <Statement>
<Statement List> -> <Statement> <Statement List>
Token: separator	Lexer:}
<Compound> -> { < Statement List> }
<Statement> -> <Compound>
line 16; ' put ' error, 'whileend' expected
