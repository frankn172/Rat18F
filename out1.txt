Output:
token		lexeme
Token: keyword		Lexer:function
Token: identifier	Lexer:convert1x
Token: separator	Lexer:(
Token: identifier	Lexer:fahr
<IDs> -> <Identifier>
Token: separator	Lexer::
Token: keyword		Lexer:int
<Qualifier> -> int
<Parameter> -> <IDs > : <Qualifier>
<Parameter List> -> <Parameter>
<Opt Parameter List> -> <Parameter List>
Token: separator	Lexer:)
<Empty> ->
<Opt Declaration List> -> <Empty>
Token: separator	Lexer:{
Token: keyword		Lexer:return
Token: integer		Lexer:5
<Primary> -> <Integer>
<Factor> -> <Primary>
Token: operator	Lexer:*
Token: separator	Lexer:(
Token: identifier	Lexer:fahr
<Primary> -> <Identifier>
<Factor> -> <Primary>
<Empty> ->
<Term2> -> <Empty>
<Term2> -> <Factor> <Term2>
Token: operator	Lexer:-
Token: integer		Lexer:32
<Primary> -> <Integer>
<Factor> -> <Primary>
<Empty> ->
<Term2> -> <Empty>
<Term2> -> <Factor> <Term2>
<Empty> ->
<Expression2> -> <Empty>
<Expression2> -> - <Term2> <Expression2>
<Expression1>  -> <Term2> <Expression2>
Token: separator	Lexer:)
<Primary> -> ( <Expression> )
<Factor> -> <Primary>
Token: operator	Lexer:/
Token: integer		Lexer:9
<Primary> -> <Integer>
<Factor> -> <Primary>
<Empty> ->
<Term2> -> <Empty>
<Term> -> /  <Factor> <Term>
<Term2> -> * <Factor> <Term2>
<Term2> -> <Factor> <Term2>
<Empty> ->
<Expression2> -> <Empty>
<Expression1>  -> <Term2> <Expression2>
Token: separator	Lexer:;
<Return> -> return; | return <Expression1>;
<Statement> -> <Return>
<Statement List> -> <Statement>
Token: separator	Lexer:}
<Body> -> { < Statement List> }
<Function> -> function  <Identifier>   ( <Opt Parameter List> )  <Opt Declaration List>  <Body>
<Empty> ->
<Function Definitions> -> <Function> 
<Opt Function Definitions> -> <Function Definitions>
Token: separator	Lexer:$$
Token: keyword		Lexer:int
<Qualifier> -> int
Token: identifier	Lexer:low
Token: separator	Lexer:,
Token: identifier	Lexer:high
Token: separator	Lexer:,
Token: identifier	Lexer:step
<IDs> -> <Identifier>
<IDs> -> <Identifier>, <IDs>
<IDs> -> <Identifier>, <IDs>
<Declaration> -> <Qualifier > <IDs>
Token: separator	Lexer:;
<Declaration List>  -> <Declaration> ;
<Opt Declaration List> -> <Declaration List>
Token: keyword		Lexer:get
Token: separator	Lexer:(
Token: identifier	Lexer:low
Token: separator	Lexer:,
Token: identifier	Lexer:high
Token: separator	Lexer:,
Token: identifier	Lexer:step
<IDs> -> <Identifier>
<IDs> -> <Identifier>, <IDs>
<IDs> -> <Identifier>, <IDs>
Token: separator	Lexer:)
Token: separator	Lexer:;
<Scan> -> get ( <IDs> );
<Statement> -> <Scan>
Token: keyword		Lexer:while
Token: separator	Lexer:(
Token: identifier	Lexer:low
<Primary> -> <Identifier>
<Factor> -> <Primary>
<Empty> ->
<Term2> -> <Empty>
<Term2> -> <Factor> <Term2>
<Empty> ->
<Expression2> -> <Empty>
<Expression1>  -> <Term2> <Expression2>
Token: operator	Lexer:<
<Relop> -> <
Token: identifier	Lexer:high
<Primary> -> <Identifier>
<Factor> -> <Primary>
<Empty> ->
<Term2> -> <Empty>
<Term2> -> <Factor> <Term2>
<Empty> ->
<Expression2> -> <Empty>
<Expression1>  -> <Term2> <Expression2>
<Condition> -> <Expression1>  <Relop>   <Expression1>
Token: separator	Lexer:)
Token: separator	Lexer:{
Token: keyword		Lexer:put
Token: separator	Lexer:(
Token: identifier	Lexer:low
<Primary> -> <Identifier>
<Factor> -> <Primary>
<Empty> ->
<Term2> -> <Empty>
<Term2> -> <Factor> <Term2>
<Empty> ->
<Expression2> -> <Empty>
<Expression1>  -> <Term2> <Expression2>
Token: separator	Lexer:)
Token: separator	Lexer:;
<Print> -> put ( <Expression1>);
<Statement> -> <Print>
Token: keyword		Lexer:put
Token: separator	Lexer:(
Token: identifier	Lexer:convert1x
Token: separator	Lexer:(
Token: identifier	Lexer:low
<IDs> -> <Identifier>
Token: separator	Lexer:)
<Primary> -> <Identifier>  (<IDs>)
<Factor> -> <Primary>
<Empty> ->
<Term2> -> <Empty>
<Term2> -> <Factor> <Term2>
<Empty> ->
<Expression2> -> <Empty>
<Expression1>  -> <Term2> <Expression2>
Token: separator	Lexer:)
Token: separator	Lexer:;
<Print> -> put ( <Expression1>);
<Statement> -> <Print>
Token: identifier	Lexer:low
Token: operator	Lexer:=
Token: identifier	Lexer:low
<Primary> -> <Identifier>
<Factor> -> <Primary>
<Empty> ->
<Term2> -> <Empty>
<Term2> -> <Factor> <Term2>
Token: operator	Lexer:+
Token: identifier	Lexer:step
<Primary> -> <Identifier>
<Factor> -> <Primary>
<Empty> ->
<Term2> -> <Empty>
<Term2> -> <Factor> <Term2>
<Empty> ->
<Expression2> -> <Empty>
<Expression2>  ->   + <Term2> <Expression2>
<Expression1>  -> <Term2> <Expression2>
Token: separator	Lexer:;
<Assign> -> <Identifier> = <Expression1>;
<Statement> -> <Assign>
<Statement List> -> <Statement>
<Statement List> -> <Statement> <Statement List>
<Statement List> -> <Statement> <Statement List>
Token: separator	Lexer:}
<Compound> -> { < Statement List> }
<Statement> -> <Compound>
Token: keyword		Lexer:whileend
<While> ->  while ( <Condition>  )  <Statement>  whileend
<Statement> -> <While>
<Statement List> -> <Statement>
<Statement List> -> <Statement> <Statement List>
Token: separator	Lexer:$$
<Rat18F> -> <Opt Function Definitions>   $$  <Opt Declaration List>  <Statement List>  $$
